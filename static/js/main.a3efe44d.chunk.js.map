{"version":3,"sources":["redux/actions.js","getWeb3.js","redux/interactions.js","redux/selectors.js","Content.js","App.js","redux/reducers.js","redux/configure.js","serviceWorker.js","index.js"],"names":["accountLoading","account","type","accountLoaded","totalUsersLoaded","totalUsers","totalWeiLoaded","totalWei","totalPayoutLoaded","totalPayout","currentlyPayingLoaded","currentlyPaying","getWeb3","Promise","resolve","reject","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","loadBlockchainData","dispatch","loadAccount","loadDoubler","doubler","loadDoublerData","loadWeb3","connection","checkAccounts","eth","getAccounts","web3Accounts","web3Account","accounts","loadTotalUsers","loadTotalWei","loadTotalPayout","loadCurrentlyPaying","methods","call","net","getId","networkId","deployedNetwork","Doubler","networks","instance","Contract","abi","address","depositEther","amount","etherAmount","utils","toWei","join","send","from","value","on","hash","err","web3Selector","createSelector","state","get","w","doublerSelector","d","accountSelector","depositAmountSelector","totalPayoutSelector","t","currentlyPayingSelector","Content","props","depositAmount","invest","usersPaid","e","preventDefault","alert","connectBlockchain","connectWallet","className","onSubmit","htmlFor","step","name","id","min","onChange","target","required","showForm","this","Component","connect","App","rootReducer","combineReducers","action","user","deposit","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preLoadedState","Boolean","location","hostname","match","ReactDOM","render","store","createStore","applyMiddleware","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3efe44d.chunk.js","sourcesContent":["export function web3Loaded(connection){\n    return {\n        type: 'WEB3_LOADED',\n        connection\n    }\n}\n\nexport function accountLoading(account){\n    return {\n        type: 'ACCOUNT_LOADING',\n        account\n    }\n}\n\nexport function accountLoaded(account){\n    return {\n        type: 'ACCOUNT_LOADED',\n        account\n    }\n}\n\nexport function totalUsersLoaded(totalUsers){\n    return {\n        type: 'TOTAL_USERS_LOADED',\n        totalUsers\n    }\n}\n\nexport function totalWeiLoaded(totalWei){\n    return {\n        type: 'TOTAL_WEI_LOADED',\n        totalWei\n    }\n}\n\nexport function totalPayoutLoaded(totalPayout){\n    return {\n        type: 'TOTAL_PAYOUT_LOADED',\n        totalPayout\n    }\n}\n\nexport function currentlyPayingLoaded(currentlyPaying){\n    return {\n        type: 'CURRENTLY_PAYING_LOADED',\n        currentlyPaying\n    }\n}\n\nexport function doublerLoaded(doubler){\n    return {\n        type: 'DOUBLER_LOADED',\n        doubler\n    }\n}\n\nexport function etherAmountChanged(amount){\n    return {\n        type: 'ETHER_AMOUNT_CHANGED',\n        amount\n    }\n}","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise( async (resolve, reject) => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n  });\n\nexport default getWeb3;\n","import getWeb3 from \"../getWeb3\";\nimport Doubler from \"../contracts/Doubler.json\";\n\nimport { web3Loaded, accountLoaded, accountLoading, doublerLoaded, totalUsersLoaded, totalWeiLoaded, totalPayoutLoaded, currentlyPayingLoaded} from \"./actions\";\n\nexport const loadBlockchainData = async (web3, dispatch) => {\n    await loadAccount(web3, dispatch);\n    let doubler = await loadDoubler(web3, dispatch);\n    await loadDoublerData(doubler, dispatch);\n    return doubler;\n}\n\nexport const loadWeb3 = async (dispatch) => {\n    const web3 = await getWeb3();\n    dispatch(web3Loaded(web3));\n    return web3;\n}\n\nexport const checkAccounts = async (web3, account, dispatch) => {\n    const web3Accounts = await web3.eth.getAccounts();\n    const web3Account = web3Accounts[0];\n    return (web3Account === account);\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n    dispatch(accountLoading());\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    dispatch(accountLoaded(account));\n    return account;\n}\n\nexport const loadDoublerData = async (doubler, dispatch) => {\n    await loadTotalUsers(doubler, dispatch);\n    await loadTotalWei(doubler, dispatch);\n    await loadTotalPayout(doubler, dispatch);\n    await loadCurrentlyPaying(doubler, dispatch);\n}\n\nexport const loadTotalUsers = async (doubler, dispatch) => {\n    const totalUsers = await doubler.methods.totalUsers().call();\n    dispatch(totalUsersLoaded(totalUsers));\n    return totalUsers;\n}\n\nexport const loadTotalWei = async (doubler, dispatch) => {\n    const totalWei = await doubler.methods.totalWei().call();\n    dispatch(totalWeiLoaded(totalWei));\n    return totalWei;\n}\n\nexport const loadTotalPayout = async (doubler, dispatch) => {\n    const totalPayout = await doubler.methods.totalPayout().call();\n    dispatch(totalPayoutLoaded(totalPayout));\n    return totalPayout;\n}\n\nexport const loadCurrentlyPaying = async (doubler, dispatch) => {\n    const currentlyPaying = await doubler.methods.currentlyPaying().call();\n    dispatch(currentlyPayingLoaded(currentlyPaying));\n    return currentlyPaying;\n}\n\nexport const loadDoubler = async (web3, dispatch) => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Doubler.networks[networkId];\n    const instance = new web3.eth.Contract(\n        Doubler.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n    dispatch(doublerLoaded(instance));\n    return instance;\n}\n\nexport const depositEther = async (web3, doubler, account, amount, dispatch) => {\n    const etherAmount = web3.utils.toWei(amount, 'ether');\n    window.doubler = doubler;\n    doubler.methods.join().send({from: account, value: etherAmount})\n        .on('transactionHash', (hash) => {\n            console.log(\"HASH\");\n        })\n        .on('receipt', async (hash) => {\n            console.log(\"receipt\");\n            await loadDoublerData(doubler, dispatch);\n        })\n        .on('error', (err) => {\n            console.log(err);\n            console.log()\n        })\n}","import {get} from 'lodash';\nimport {createSelector} from 'reselect';\n\nconst web3 = state => get(state, 'web3.connection', null);\nexport const web3Selector = createSelector(web3, w => w);\n\nconst doubler = state => get(state, 'web3.doubler', null);\nexport const doublerSelector = createSelector(doubler, d => d);\n\nconst account = state => get(state, 'web3.account', null);\nexport const accountSelector = createSelector(account, d => d);\n\nconst accountLoading = state => get(state, 'web3.accountLoading', false);\nexport const accountLoadingSelector = createSelector(accountLoading, a => a);\n\nconst depositAmount = state => get(state, 'user.deposit', 0);\nexport const depositAmountSelector = createSelector(depositAmount, d => d);\n\nconst totalPayout = state => get(state, 'doubler.totalPayout', 0);\nexport const totalPayoutSelector = createSelector(totalPayout, t => t);\n\nconst currentlyPaying = state => get(state, 'doubler.currentlyPaying', 0);\nexport const currentlyPayingSelector = createSelector(currentlyPaying, t => t);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { etherAmountChanged } from './redux/actions';\nimport { depositEther, loadBlockchainData, checkAccounts, loadWeb3 } from './redux/interactions';\nimport { web3Selector, doublerSelector, accountSelector, depositAmountSelector, totalPayoutSelector, currentlyPayingSelector } from './redux/selectors';\n\nconst showForm = (props) => {\n    const {dispatch, web3, doubler, account, depositAmount, totalPayout, usersPaid} = props;\n    const etherAmountChange = (e) => dispatch(etherAmountChanged(e.target.value));\n    const invest = async (e) => {\n        e.preventDefault();\n        const accountsMatch = await checkAccounts(web3, account);\n        if (accountsMatch) {\n            await depositEther(web3, doubler, account, depositAmount, dispatch);\n        }\n        else{\n            alert(\"Your current account doesn't match up with your metamask account. Please reconnect by clicking your account button\");\n        }\n    }\n\n    const connectBlockchain = async (e) => {\n        e.preventDefault();\n        await loadWeb3(dispatch);\n    }\n\n    const connectWallet = async (e) => {\n        e.preventDefault();\n        await loadBlockchainData(web3, dispatch);\n    }\n\n    return (\n        <div>\n            <div className=\"row justify-content-center\">\n                <div className=\"col-4\">\n                    <form onSubmit={connectBlockchain}>\n                        <div className=\"form-group row\">\n                            <div className=\"col-12\">\n                                <button type=\"submit\" className={`w-100 btn text-truncate ${(web3 !== null) ? \"disabled btn-success\" : \"btn-danger\"}`}>\n                                    {(web3 !== null) ? \"Blockchain Connected\" : \"Connect Blockchain\"}\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n\n            <div className=\"row justify-content-center\">\n                <div className=\"col-4\">\n                    <form onSubmit={connectWallet}>\n                        <div className=\"form-group row\">\n                            <div className=\"col-12\">\n                                <button type=\"submit\" className={`w-100 btn text-truncate ${(web3 === null) ? \"disabled btn-danger\" : (account !== null) ? \"btn-success\" : \"btn-warning\" }`}>\n                                    {(account !== null) ? account : \"Connect Wallet\"}\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div className=\"row justify-content-center\">\n                <div className=\"col-8\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">Double your money!</div>\n                        <div className=\"card-body\">\n                            <form onSubmit={invest}>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-md-3 text-md-right\">\n                                        <label htmlFor=\"deposit\" className=\"col-form-label\">Investment (ETH)</label>\n                                    </div>\n                                    <div className=\"col-md-9\">\n                                        <input type=\"number\"\n                                            step=\"any\"\n                                            name=\"deposit\"\n                                            id=\"deposit\"\n                                            min=\"1\"\n                                            onChange={etherAmountChange}\n                                            className=\"form-control form-control\"\n                                            required />\n                                    </div>\n                                </div>\n\n                                <div className=\"form-group row\">\n                                    <div className=\"col-md-9 offset-md-3\">\n                                        <button type=\"submit\" className=\"btn btn-primary\">\n                                            INVEST\n                                        </button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>            \n            </div>\n        </div>\n    )\n}\n\nclass Content extends Component {\n    render() {\n        return (\n            showForm(this.props)\n        );\n    }\n}\n\nfunction mapStateToProps(state){\n\treturn {\n        web3: web3Selector(state),\n        doubler: doublerSelector(state),\n        account: accountSelector(state),\n        depositAmount: depositAmountSelector(state),\n        totalPayout: totalPayoutSelector(state),\n        usersPaid: currentlyPayingSelector(state)\n\t}\n}\n\nexport default connect(mapStateToProps)(Content);","import React, { Component } from \"react\";\nimport {connect} from 'react-redux';\nimport \"./App.css\";\nimport Content from \"./Content\";\n\nclass App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container py-5\">\n\t\t\t\t<Content />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nfunction mapStateToProps(state){\n\treturn {\n\n\t}\n}\n\nexport default connect(mapStateToProps)(App);\n","import {combineReducers} from 'redux';\n\nfunction web3(state = {}, action) {\n    switch (action.type) {\n        case 'WEB3_LOADED':\n            return { ...state, connection: action.connection };\n        case 'ACCOUNT_LOADING':\n            return { ...state, accountLoading: true};\n        case 'ACCOUNT_LOADED':\n            return { ...state, account: action.account, accountLoading: false };\n        case 'DOUBLER_LOADED':\n            return { ...state, doubler: action.doubler};\n        default:\n            return state;\n    }\n}\n\nfunction doubler(state = {}, action) {\n    switch (action.type) {\n        case 'TOTAL_USERS_LOADED':\n            return { ...state, totalUsers: action.totalUsers}\n        case 'TOTAL_WEI_LOADED':\n            return { ...state, totalWei: action.totalWei}\n        case 'TOTAL_PAYOUT_LOADED':\n            return { ...state, totalPayout: action.totalPayout}\n        case 'CURRENTLY_PAYING_LOADED':\n            return { ...state, currentlyPaying: action.currentlyPaying}\n        default:\n            return state;\n    }\n}\n\nfunction user(state = {}, action) {\n    switch (action.type) {\n        case 'ETHER_AMOUNT_CHANGED':\n            return { ...state, deposit: action.amount }\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = new combineReducers({\n    web3, user, doubler\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createLogger }  from \"redux-logger\";\nimport rootReducer from \"./reducers\";\n\nconst loggerMiddleware = createLogger();\nconst middleware = [];\n\n//connects redux browser to app\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore(preLoadedState){\n    return createStore(\n        rootReducer, \n        preLoadedState,\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport configureStore from './redux/configure';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}