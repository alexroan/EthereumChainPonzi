{"version":3,"sources":["redux/actions.js","getWeb3.js","redux/interactions.js","redux/selectors.js","Content.js","App.js","redux/reducers.js","redux/configure.js","serviceWorker.js","index.js"],"names":["accountLoading","account","type","accountLoaded","getWeb3","Promise","resolve","reject","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","loadBlockchainData","dispatch","loadWeb3","loadAccount","loadDoubler","connection","checkAccounts","eth","getAccounts","web3Accounts","web3Account","accounts","net","getId","networkId","deployedNetwork","Doubler","networks","instance","Contract","abi","address","doubler","depositEther","amount","etherAmount","utils","toWei","methods","join","send","from","value","on","hash","err","web3Selector","createSelector","state","get","w","doublerSelector","d","accountSelector","depositAmountSelector","Content","props","depositAmount","invest","e","preventDefault","alert","connectWallet","className","onSubmit","htmlFor","step","name","id","min","onChange","target","required","showForm","this","Component","connect","App","rootReducer","combineReducers","action","user","deposit","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preLoadedState","Boolean","location","hostname","match","ReactDOM","render","store","createStore","applyMiddleware","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.edceb9b9.chunk.js","sourcesContent":["export function web3Loaded(connection){\n    return {\n        type: 'WEB3_LOADED',\n        connection\n    }\n}\n\nexport function accountLoading(account){\n    return {\n        type: 'ACCOUNT_LOADING',\n        account\n    }\n}\n\nexport function accountLoaded(account){\n    return {\n        type: 'ACCOUNT_LOADED',\n        account\n    }\n}\n\nexport function doublerLoaded(doubler){\n    return {\n        type: 'DOUBLER_LOADED',\n        doubler\n    }\n}\n\nexport function etherAmountChanged(amount){\n    return {\n        type: 'ETHER_AMOUNT_CHANGED',\n        amount\n    }\n}","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise( async (resolve, reject) => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n  });\n\nexport default getWeb3;\n","import getWeb3 from \"../getWeb3\";\nimport Doubler from \"../contracts/Doubler.json\";\n\nimport { web3Loaded, accountLoaded, accountLoading, doublerLoaded } from \"./actions\";\n\nexport const loadBlockchainData = async (dispatch) => {\n    let web3 = await loadWeb3(dispatch);\n    await loadAccount(web3, dispatch);\n    await loadDoubler(web3, dispatch);\n    return web3;\n}\n\nexport const loadWeb3 = async (dispatch) => {\n    const web3 = await getWeb3();\n    dispatch(web3Loaded(web3));\n    return web3;\n}\n\nexport const checkAccounts = async (web3, account, dispatch) => {\n    const web3Accounts = await web3.eth.getAccounts();\n    const web3Account = web3Accounts[0];\n    return (web3Account === account);\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n    dispatch(accountLoading());\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    dispatch(accountLoaded(account));\n    return account;\n}\n\nexport const loadDoubler = async (web3, dispatch) => {\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Doubler.networks[networkId];\n    const instance = new web3.eth.Contract(\n        Doubler.abi,\n        deployedNetwork && deployedNetwork.address,\n    );\n    dispatch(doublerLoaded(instance));\n    return instance;\n}\n\nexport const depositEther = async (web3, doubler, account, amount, dispatch) => {\n    const etherAmount = web3.utils.toWei(amount, 'ether');\n    window.doubler = doubler;\n    doubler.methods.join().send({from: account, value: etherAmount})\n        .on('transactionHash', (hash) => {\n            console.log(\"HASH\");\n        })\n        .on('receipt', (hash) => {\n            console.log(\"receipt\");\n        })\n        .on('error', (err) => {\n            console.log(err);\n            console.log()\n        })\n}","import {get} from 'lodash';\nimport {createSelector} from 'reselect';\n\nconst web3 = state => get(state, 'web3.connection', null);\nexport const web3Selector = createSelector(web3, w => w);\n\nconst doubler = state => get(state, 'web3.doubler', null);\nexport const doublerSelector = createSelector(doubler, d => d);\n\nconst account = state => get(state, 'web3.account', null);\nexport const accountSelector = createSelector(account, d => d);\n\nconst accountLoading = state => get(state, 'web3.accountLoading', false);\nexport const accountLoadingSelector = createSelector(accountLoading, a => a);\n\nconst depositAmount = state => get(state, 'user.deposit', 0);\nexport const depositAmountSelector = createSelector(depositAmount, d => d);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport { etherAmountChanged } from './redux/actions';\nimport { depositEther, loadBlockchainData, checkAccounts } from './redux/interactions';\nimport { web3Selector, doublerSelector, accountSelector, depositAmountSelector } from './redux/selectors';\n\nconst showForm = (props) => {\n    const {dispatch, web3, doubler, account, depositAmount} = props;\n\n    const etherAmountChange = (e) => dispatch(etherAmountChanged(e.target.value));\n    const invest = async (e) => {\n        e.preventDefault();\n        const accountsMatch = await checkAccounts(web3, account);\n        if (accountsMatch) {\n            await depositEther(web3, doubler, account, depositAmount, dispatch);\n        }\n        else{\n            alert(\"Your current account doesn't match up with your metamask account. Please reconnect by clicking your account button\");\n        }\n    }\n\n    const connectWallet = async (e) => {\n        e.preventDefault();\n        console.log(\"Connecting wallet\");\n        await loadBlockchainData(dispatch);\n        console.log(\"Connected\");\n    }\n\n    return (\n        <div>\n            <div className=\"row justify-content-center\">\n                <div className=\"col-4\">\n                    <form onSubmit={connectWallet}>\n                        <div className=\"form-group row\">\n                            <div className=\"col-12\">\n                                <button type=\"submit\" className=\"w-100 btn btn-secondary text-truncate\">\n                                    {(account !== null) ? account : \"Connect Wallet\"}\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n\n            <div className=\"row justify-content-center\">\n                <div className=\"col-8\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">Double your money!</div>\n                        <div className=\"card-body\">\n                            <form onSubmit={invest}>\n                                <div className=\"form-group row\">\n                                    <div className=\"col-md-3 text-md-right\">\n                                        <label htmlFor=\"deposit\" className=\"col-form-label\">Investment (ETH)</label>\n                                    </div>\n                                    <div className=\"col-md-9\">\n                                        <input type=\"number\"\n                                            step=\"any\"\n                                            name=\"deposit\"\n                                            id=\"deposit\"\n                                            min=\"1\"\n                                            onChange={etherAmountChange}\n                                            className=\"form-control form-control\"\n                                            required />\n                                    </div>\n                                </div>\n\n                                <div className=\"form-group row\">\n                                    <div className=\"col-md-9 offset-md-3\">\n                                        <button type=\"submit\" className=\"btn btn-primary\">\n                                            INVEST\n                                        </button>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>            \n            </div>\n        </div>\n    )\n}\n\nclass Content extends Component {\n    render() {\n        return (\n            showForm(this.props)\n        );\n    }\n}\n\nfunction mapStateToProps(state){\n\treturn {\n        web3: web3Selector(state),\n        doubler: doublerSelector(state),\n        account: accountSelector(state),\n        depositAmount: depositAmountSelector(state)\n\t}\n}\n\nexport default connect(mapStateToProps)(Content);","import React, { Component } from \"react\";\nimport {connect} from 'react-redux';\nimport \"./App.css\";\nimport Content from \"./Content\";\n\nclass App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container py-5\">\n\t\t\t\t<Content />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nfunction mapStateToProps(state){\n\treturn {\n\n\t}\n}\n\nexport default connect(mapStateToProps)(App);\n","import {combineReducers} from 'redux';\n\nfunction web3(state = {}, action) {\n    switch (action.type) {\n        case 'WEB3_LOADED':\n            return { ...state, connection: action.connection };\n        case 'ACCOUNT_LOADING':\n            return { ...state, accountLoading: true};\n        case 'ACCOUNT_LOADED':\n            return { ...state, account: action.account, accountLoading: false };\n        case 'DOUBLER_LOADED':\n            return { ...state, doubler: action.doubler};\n        default:\n            return state;\n    }\n}\n\nfunction user(state = {}, action) {\n    switch (action.type) {\n        case 'ETHER_AMOUNT_CHANGED':\n            return { ...state, deposit: action.amount }\n        default:\n            return state;\n    }\n}\n\nconst rootReducer = new combineReducers({\n    web3, user\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createLogger }  from \"redux-logger\";\nimport rootReducer from \"./reducers\";\n\nconst loggerMiddleware = createLogger();\nconst middleware = [];\n\n//connects redux browser to app\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore(preLoadedState){\n    return createStore(\n        rootReducer, \n        preLoadedState,\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport configureStore from './redux/configure';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}